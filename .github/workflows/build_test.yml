name: Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Cache Gradle wrapper
      uses: actions/cache@v4
      with:
        path: ~/.gradle/wrapper
        key: gradle-wrapper-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-wrapper-${{ runner.os }}-
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches/modules-2
          ~/.gradle/caches/jars-*
        key: gradle-deps-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/settings.gradle*', '**/gradle.lockfile', '**/gradle/libs.versions.toml', 'buildSrc/**') }}
        restore-keys: |
          gradle-deps-${{ runner.os }}-

    - name: Build with Gradle Wrapper
      run: ./gradlew build

  dependency-submission:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: "17"
        distribution: "temurin"

    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå B≈Çƒôdny format wersji: $VERSION"
          echo "Wersja musi byƒá w formacie Major.Minor.Patch (np. 1.0.0)"
          exit 1
        fi
        echo "‚úÖ Poprawny format wersji: $VERSION"

    - name: Update version in build.gradle
      run: |
        VERSION="${{ github.event.inputs.version }}"
        sed -i "s/version = '.*'/version = '$VERSION'/" build.gradle
        echo "Zaktualizowano wersjƒô w build.gradle na: $VERSION"

    - name: Verify version update
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if grep -q "version = '$VERSION'" build.gradle; then
          echo "‚úÖ Wersja zosta≈Ça poprawnie zaktualizowana w build.gradle"
        else
          echo "‚ùå B≈ÇƒÖd podczas aktualizacji wersji w build.gradle"
          exit 1
        fi

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit and push changes
      run: |
        VERSION="${{ github.event.inputs.version }}"
        git add build.gradle
        git commit -m "Bump version to $VERSION"
        git push origin master

    - name: Create and push tag
      run: |
        VERSION="${{ github.event.inputs.version }}"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
        echo "‚úÖ Utworzono tag v$VERSION"

    - name: Summary
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "üéâ Release $VERSION zosta≈Ç pomy≈õlnie utworzony!"
        echo "üìù Plik build.gradle zosta≈Ç zaktualizowany"
        echo "üîñ Tag v$VERSION zosta≈Ç utworzony i wypchniƒôty"
        echo "üöÄ Zmiany zosta≈Çy wypchniƒôte do ga≈Çƒôzi master"
